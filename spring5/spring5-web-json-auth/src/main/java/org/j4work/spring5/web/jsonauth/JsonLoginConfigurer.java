package org.j4work.spring5.web.jsonauth;

import org.springframework.security.config.annotation.web.HttpSecurityBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractAuthenticationFilterConfigurer;
import org.springframework.security.config.annotation.web.configurers.RememberMeConfigurer;
import org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.security.web.authentication.RememberMeServices;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.security.web.authentication.session.SessionAuthenticationStrategy;
import org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.security.web.util.matcher.RequestMatcher;

/*
 * Copyright 2002-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Adds form based authentication. All attributes have reasonable defaults
 * making all parameters are optional. If no {@link #loginPage( String )} is
 * specified, a default login page will be generated by the framework.
 * <p>
 * <h2>Security Filters</h2>
 * <p>
 * The following Filters are populated
 * <p>
 * <ul>
 * <li>
 * {@link UsernamePasswordAuthenticationFilter}
 * </li>
 * </ul>
 * <p>
 * <h2>Shared Objects Created</h2>
 * <p>
 * The following shared objects are populated
 * <p>
 * <ul>
 * <li> {@link AuthenticationEntryPoint} </li>
 * </ul>
 * <p>
 * <h2>Shared Objects Used</h2>
 * <p>
 * The following shared objects are used:
 * <p>
 * <ul>
 * <li>{@link RememberMeServices} - is optionally used. See {@link RememberMeConfigurer}</li>
 * <li>{@link SessionAuthenticationStrategy} - is optionally used. See {@link SessionManagementConfigurer}</li>
 * <li>{@link DefaultLoginPageGeneratingFilter} - if present will be populated with information from the configuration</li>
 * </ul>
 *
 * @author Rob Winch
 * @since 3.2
 */
public final class JsonLoginConfigurer<H extends HttpSecurityBuilder<H>> extends AbstractAuthenticationFilterConfigurer<H, JsonLoginConfigurer<H>, UsernamePasswordAuthenticationFilter>
{

    /**
     * Creates a new instance
     *
     * @see HttpSecurity#formLogin()
     */
    public JsonLoginConfigurer()
    {
        super(new JsonLoginCreateAuthenticationFilter(), null);
    }

    /* (non-Javadoc)
     * @see org.springframework.security.config.annotation.web.configurers.AbstractAuthenticationFilterConfigurer#createLoginProcessingUrlMatcher(java.lang.String)
     */
    @Override
    protected RequestMatcher createLoginProcessingUrlMatcher(
        String loginProcessingUrl)
    {
        return new AntPathRequestMatcher(loginProcessingUrl, "PUT");
    }

    /**
     * <p>
     * Specifies the URL to send users to if login is required.
     * <p>
     * If "/authenticate" was passed to this method it update the defaults as shown
     * below:
     * <p>
     * <ul>
     * <li>/authenticate GET - the login form</li>
     * <li>/authenticate POST - process the credentials and if valid authenticate the
     * user</li>
     * <li>/authenticate?error GET - redirect here for failed authentication attempts</li>
     * <li>/authenticate?logout GET - redirect here after successfully logging out</li>
     * </ul>
     *
     * @param loginPage the login page to redirect to if authentication is required
     *                  (i.e. "/login")
     * @return the {@link JsonLoginConfigurer} for additional customization
     */
    public JsonLoginConfigurer<H> loginPage(String loginPage)
    {
        return super.loginPage(loginPage);
    }

}
